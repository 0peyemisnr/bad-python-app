version: 2.1
jobs:
  semgrep-scan:
    parameters:
      default_branch:
        type: string
        default: main
    environment:
      SEMGREP_BASELINE_REF: << parameters.default_branch >>

    docker:
      - image: returntocorp/semgrep
    steps:
      - checkout
      - run: 
          name: "Semgrep scan"
          command: | 
            echo 'export SEMGREP_COMMIT=${CIRCLE_SHA1}' >> $BASH_ENV
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              echo 'export SEMGREP_PR_ID=${CIRCLE_PULL_REQUEST##*/}' >> $BASH_ENV
              echo "this is not a pull request-1"
            fi
            echo 'export SEMGREP_JOB_URL=${CIRCLE_BUILD_URL}' >> $BASH_ENV
            echo 'export SEMGREP_REPO_NAME=${CIRCLE_PROJECT_REPONAME}' >> $BASH_ENV
            echo 'export SEMGREP_REPO_URL=${CIRCLE_REPOSITORY_URL}' >> $BASH_ENV
            echo 'export SEMGREP_BRANCH=${CIRCLE_BRANCH}' >> $BASH_ENV
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              echo 'export SEMGREP_BASELINE_REF="main"' >> $BASH_ENV
              echo "this is not a pull request-2"
            fi
            echo 'export SEMGREP_APP_TOKEN=$SEMGREP_APP_TOKEN' >> $BASH_ENV
            echo ${CIRCLE_SHA1}
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              echo ${CIRCLE_PULL_REQUEST##*/}
              echo "this is not a pull request-3"
            fi
            echo ${CIRCLE_BUILD_URL}
            echo ${CIRCLE_PROJECT_REPONAME}
            echo ${CIRCLE_REPOSITORY_URL}
            echo ${CIRCLE_BRANCH}
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              git fetch origin "+refs/heads/*:refs/remotes/origin/*"
              echo "this is not a pull request-3"
            fi
            semgrep ci
workflows:
  scan:
    jobs:
      - semgrep-scan:
         context:
            - dev
# workflows:
#   lint-build-test:
#     when:
#       or:
#         - equal: [main, << pipeline.git.branch >>]
#         - equal: [staging, << pipeline.git.branch >>]
#     jobs:
#       - lint-code
#       - hold:
#           type: approval
#           requires:
#             - lint-code
#       - build-and-test:
#           requires:
#             - hold
# older version
# version: 2.1
# jobs:
#   semgrep-scan:
#     parameters:
#       default_branch:
#         type: string
#         default: main
#     environment:
#       # Uncomment the following line to scan changed 
#       # files in PRs or MRs (diff-aware scanning): 
#       - export SEMGREP_BASELINE_REF = "origin/main"
#       - git fetch origin "+refs/heads/*:refs/remotes/origin/*"
#       # SEMGREP_BASELINE_REF: << parameters.default_branch >>

#       # Troubleshooting:

#       # Uncomment the following lines if Semgrep Cloud Platform > Findings Page does not create links
#       # to the code that generated a finding or if you are not receiving PR or MR comments.
#       # SEMGREP_REPO_NAME: '$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME'
#       # SEMGREP_REPO_URL: << pipeline.project.git_url >>
#       # SEMGREP_BRANCH: << pipeline.git.branch >>

#     docker:
#       - image: returntocorp/semgrep
#     steps:
#       - checkout

#       # Uncomment the following lines if Semgrep Cloud Platform > Findings Page does not create links
#       # to the code that generated a finding or if you are not receiving PR or MR comments.
#       # - run:
#       #     name: "Manually set environment variables"
#       #     command: |
#       #         echo 'export SEMGREP_COMMIT=$CIRCLE_SHA1' >> $BASH_ENV
#       #         echo 'export SEMGREP_PR_ID=${CIRCLE_PULL_REQUEST##*/}' >> $BASH_ENV
#       #         echo 'export SEMGREP_JOB_URL=$CIRCLE_BUILD_URL' >> $BASH_ENV
#       - run:
#           name: "Semgrep scan"
#           command: |
#                 echo 'export SEMGREP_APP_TOKEN=$SEMGREP_APP_TOKEN' >> $BASH_ENV
#                 echo 'export SEMGREP_COMMIT=$CIRCLE_SHA1' >> $BASH_ENV
#                 echo 'export SEMGREP_PR_ID=${CIRCLE_PULL_REQUEST##*/}' >> $BASH_ENV
#                 echo 'export SEMGREP_JOB_URL=$CIRCLE_BUILD_URL' >> $BASH_ENV
#                 semgrep ci
# workflows:
#   main:
#     jobs:
#       - semgrep-scan:
#          context:
#             - dev
# 
